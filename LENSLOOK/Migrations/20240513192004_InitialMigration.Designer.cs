// <auto-generated />
using System;
using LENSLOOK.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LENSLOOK.Migrations
{
    [DbContext(typeof(LENSLOOKDbContext))]
    [Migration("20240513192004_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoctorsUsers", b =>
                {
                    b.Property<int>("DoctorsDID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUID")
                        .HasColumnType("int");

                    b.HasKey("DoctorsDID", "UsersUID");

                    b.HasIndex("UsersUID");

                    b.ToTable("Examinations", (string)null);
                });

            modelBuilder.Entity("LENSLOOK.Entities.Booking", b =>
                {
                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("SID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UID", "DID", "SID");

                    b.HasIndex("DID");

                    b.HasIndex("SID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Delivery", b =>
                {
                    b.Property<int>("DelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DelID"), 1L, 1);

                    b.Property<string>("DeliveryCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DelID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Doctors", b =>
                {
                    b.Property<int>("DID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DID"), 1L, 1);

                    b.Property<string>("DEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DGender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dpassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Doctorsphones", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<string>("Dphone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DID", "Dphone");

                    b.ToTable("Doctorsphones");
                });

            modelBuilder.Entity("LENSLOOK.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OID")
                        .HasColumnType("int");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.HasKey("OID", "PID");

                    b.HasIndex("PID");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Orders", b =>
                {
                    b.Property<int>("OID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelID")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryDelID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UID")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUID")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OID");

                    b.HasIndex("DeliveryDelID");

                    b.HasIndex("UsersUID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Products", b =>
                {
                    b.Property<int>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PID"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrameType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LensType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Rates", b =>
                {
                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UID", "DID");

                    b.HasIndex("DID");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Reviews", b =>
                {
                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<decimal>("reviews")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PID", "UID");

                    b.HasIndex("UID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Services", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"), 1L, 1);

                    b.Property<string>("SDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Userphnoes", b =>
                {
                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<string>("Uphone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID", "Uphone");

                    b.ToTable("Userphnoes");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Users", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UGender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ULastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("URoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Upassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LENSLOOK.Entities.VendorPhone", b =>
                {
                    b.Property<int>("VID")
                        .HasColumnType("int");

                    b.Property<string>("Vphone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VID", "Vphone");

                    b.ToTable("VendorPhones");
                });

            modelBuilder.Entity("LENSLOOK.Entities.VendorProduct", b =>
                {
                    b.Property<int>("VID")
                        .HasColumnType("int");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.HasKey("VID", "PID");

                    b.HasIndex("PID");

                    b.ToTable("VendorProducts");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Vendors", b =>
                {
                    b.Property<int>("VID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VID"), 1L, 1);

                    b.Property<string>("VEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("DoctorsUsers", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Doctors", null)
                        .WithMany()
                        .HasForeignKey("DoctorsDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LENSLOOK.Entities.Booking", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Doctors", "Doctors")
                        .WithMany("Bookings")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Services", "Services")
                        .WithMany("Bookings")
                        .HasForeignKey("SID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Users", "Users")
                        .WithMany("Bookings")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Doctorsphones", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Doctors", "Doctors")
                        .WithMany("DoctorPhones")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("LENSLOOK.Entities.OrderProduct", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Orders", "Orders")
                        .WithMany("OrderProduct")
                        .HasForeignKey("OID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Products", "products")
                        .WithMany("OrderProduct")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("products");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Orders", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Delivery", null)
                        .WithMany("Order")
                        .HasForeignKey("DeliveryDelID");

                    b.HasOne("LENSLOOK.Entities.Users", null)
                        .WithMany("Orders")
                        .HasForeignKey("UsersUID");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Rates", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Doctors", "Doctors")
                        .WithMany("Rates")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Users", "Users")
                        .WithMany("Rates")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Reviews", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Products", "products")
                        .WithMany("Reviews")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");

                    b.Navigation("products");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Userphnoes", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Users", "users")
                        .WithMany("UserPhones")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("LENSLOOK.Entities.VendorPhone", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Vendors", "vendors")
                        .WithMany("VendorPhones")
                        .HasForeignKey("VID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vendors");
                });

            modelBuilder.Entity("LENSLOOK.Entities.VendorProduct", b =>
                {
                    b.HasOne("LENSLOOK.Entities.Products", "products")
                        .WithMany("vendorProducts")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LENSLOOK.Entities.Vendors", "Vendors")
                        .WithMany("vendorProducts")
                        .HasForeignKey("VID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendors");

                    b.Navigation("products");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Delivery", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Doctors", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DoctorPhones");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Orders", b =>
                {
                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Products", b =>
                {
                    b.Navigation("OrderProduct");

                    b.Navigation("Reviews");

                    b.Navigation("vendorProducts");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Services", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Users", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");

                    b.Navigation("UserPhones");
                });

            modelBuilder.Entity("LENSLOOK.Entities.Vendors", b =>
                {
                    b.Navigation("VendorPhones");

                    b.Navigation("vendorProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
